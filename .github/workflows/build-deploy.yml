name: Build & deploy

on:
  workflow_dispatch:
  push:
    branches:
      - "main"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Generate env variables
        run: |
          echo "REPO=${GITHUB_REPOSITORY,,}" >> ${GITHUB_ENV}
          echo "DATE=$(date +'%Y-%m-%d')" >> ${GITHUB_ENV}
          echo "VERSION=$(date +'%Y.%m.%d')-${GITHUB_RUN_NUMBER}" >> ${GITHUB_ENV}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.REPOSITORY_OWNER }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          build-args: |
            Version=${{ env.VERSION }}
          tags: |
            ghcr.io/${{ env.REPO }}:latest
            ghcr.io/${{ env.REPO }}:${{ env.DATE }}
            ghcr.io/${{ env.REPO }}:${{ github.RUN_NUMBER }}
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Prepare SSH
        env:
          remote_host: ${{ secrets.SSH_HOST }}
          remote_port: ${{ secrets.SSH_PORT }}
          remote_user: ${{ secrets.SSH_USER }}
          remote_key: ${{ secrets.SSH_KEY }}
          remote_script: ${{ secrets.SSH_SCRIPT }}
        run: |
          exit 1
          # mkdir ~/.ssh          
          # echo "$remote_key" > ~/.ssh/id_rsa
          # chmod 600 ~/.ssh/id_rsa
          # hosts="$(dig +short "$remote_host" | grep -v '\.$' | sed -z 's|\n|,|g')$remote_host"
          # ssh-keyscan -p $remote_port -H "$hosts" > ~/.ssh/known_hosts
          # ssh -p $remote_port -i ~/.ssh/id_rsa $remote_user@$remote_host "$remote_script ${{ github.RUN_NUMBER }}"
          # rm ~/.ssh/id_rsa
  notify:
    name: Notify
    runs-on: ubuntu-latest
    if: always()
    needs: [build, deploy]
    steps:
      - name: Success
        if: ${{ needs.build.result == 'success' && needs.deploy.result == 'success' }}
        continue-on-error: true
        env:
          notify_cred: ${{ secrets.NOTIFY_CRED }}
          notify_url: ${{ secrets.NOTIFY_URL }}
          app_url: ${{ secrets.URL }}
          action_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          curl \
            -u $notify_cred \
            -H "Title: Albumica deployed" \
            -H "Tags: octopus" \
            -H "Priority: 3" \
            -H "Actions: view, GitHub, $action_url, clear=true; \
                         view, App, $app_url, clear=true" \
            -H "Content-Type: text/plain" \
            -d $'${{ github.REPOSITORY }} deployed.' \
            $notify_url
      - name: Failure
        if: ${{ needs.build.result == 'failure' || needs.deploy.result == 'failure' }}
        continue-on-error: true
        env:
          notify_cred: ${{ secrets.NOTIFY_CRED }}
          notify_url: ${{ secrets.NOTIFY_URL }}
          app_url: ${{ secrets.URL }}
          action_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          curl \
            -u $notify_cred \
            -H "Title: Albumica wasn't deployed" \
            -H "Tags: cursing_face" \
            -H "Priority: 4" \
            -H "Actions: view, GitHub, $action_url" \
            -H "Content-Type: text/plain" \
            -d $'${{ github.REPOSITORY }} failed.' \
            $notify_url