<div class="mb-3">
    <label for="@For" class="form-label">@Label @(Required ? "*":"")</label>
    <select @ref=Input class="form-select @(_isError ? "is-invalid":"")" @bind=@Value @onblur=Update required=@Required>
        @foreach (var item in Items)
        {
            <option value="@item.Key">@item.Value</option>
        }
    </select>
    @if (_isError)
    {
        <div class="invalid-feedback">
            @Errors![For]
        </div>
    }
</div>

@code{
    private bool _isError => Errors != null && Errors.ContainsKey(For);
    private ElementReference Input;
    [Parameter] public string For { get; set; } = null!;
    [Parameter] public string Label { get; set; } = null!;
    [Parameter] public int Value { get; set; }
    [Parameter] public EventCallback<int> ValueChanged { get; set; }
    [Parameter] public bool Required { get; set; }
    [Parameter] public Dictionary<int, string> Items { get; set; } = null!;
    [Parameter]
    public Dictionary<string, string>? Errors { get; set; }
    [Parameter] public bool AutoFocus { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender && AutoFocus)
            await Input.FocusAsync();
    }
    private async Task Update()
    {
        if (_isError)
            Errors!.Remove(For);

        if (!ValueChanged.HasDelegate)
            return;

        await ValueChanged.InvokeAsync(Value);
    }
}