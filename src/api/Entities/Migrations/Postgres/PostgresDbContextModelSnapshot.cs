// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using albumica.Entities;

#nullable disable

namespace albumica.Entities.Migrations.Postgres
{
    [DbContext(typeof(PostgresDbContext))]
    partial class PostgresDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MediaTag", b =>
                {
                    b.Property<int>("MediaId")
                        .HasColumnType("integer")
                        .HasColumnName("media_id");

                    b.Property<int>("TagsTagId")
                        .HasColumnType("integer")
                        .HasColumnName("tags_tag_id");

                    b.HasKey("MediaId", "TagsTagId")
                        .HasName("pk_media_tag");

                    b.HasIndex("TagsTagId")
                        .HasDatabaseName("ix_media_tag_tags_tag_id");

                    b.ToTable("media_tag", (string)null);
                });

            modelBuilder.Entity("MediaUser", b =>
                {
                    b.Property<int>("BasketMediaId")
                        .HasColumnType("integer")
                        .HasColumnName("basket_media_id");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("integer")
                        .HasColumnName("users_user_id");

                    b.HasKey("BasketMediaId", "UsersUserId")
                        .HasName("pk_media_user");

                    b.HasIndex("UsersUserId")
                        .HasDatabaseName("ix_media_user_users_user_id");

                    b.ToTable("media_user", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text")
                        .HasColumnName("friendly_name");

                    b.Property<string>("Xml")
                        .HasColumnType("text")
                        .HasColumnName("xml");

                    b.HasKey("Id")
                        .HasName("pk_data_protection_keys");

                    b.ToTable("data_protection_keys", (string)null);
                });

            modelBuilder.Entity("albumica.Entities.Media", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("media_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MediaId"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean")
                        .HasColumnName("hidden");

                    b.Property<string>("Import")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("import");

                    b.Property<bool>("IsVideo")
                        .HasColumnType("boolean")
                        .HasColumnName("is_video");

                    b.Property<string>("Original")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("original");

                    b.Property<string>("Preview")
                        .HasColumnType("text")
                        .HasColumnName("preview");

                    b.Property<string>("SHA256")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sha256");

                    b.HasKey("MediaId")
                        .HasName("pk_media");

                    b.ToTable("media", (string)null);
                });

            modelBuilder.Entity("albumica.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tag_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TagId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_normalized");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.HasKey("TagId")
                        .HasName("pk_tags");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("albumica.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("Disabled")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("disabled");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.Property<DateTime?>("LastUpload")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_upload");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.HasKey("UserId")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("MediaTag", b =>
                {
                    b.HasOne("albumica.Entities.Media", null)
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_media_tag_media_media_id");

                    b.HasOne("albumica.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_media_tag_tags_tags_tag_id");
                });

            modelBuilder.Entity("MediaUser", b =>
                {
                    b.HasOne("albumica.Entities.Media", null)
                        .WithMany()
                        .HasForeignKey("BasketMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_media_user_media_basket_media_id");

                    b.HasOne("albumica.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_media_user_users_users_user_id");
                });
#pragma warning restore 612, 618
        }
    }
}
